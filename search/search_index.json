{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ANY.RUN Tools","text":"<p>Python SDK for ANY.RUN APIs</p>"},{"location":"#overview","title":"Overview","text":"<p>ANY.RUN Tools is a Python library that provides a convenient way to interact with ANY.RUN APIs:</p> <ul> <li>Sandbox API - Submit files and URLs for analysis, monitor analysis progress, and get results</li> <li>TI Lookup API (coming soon) - Look up file hashes in the ANY.RUN threat intelligence database</li> <li>TI YARA API (coming soon) - Match YARA rules against public and private samples</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>\u2728 Modern async/await API</li> <li>\ud83d\ude80 Type hints and data validation with Pydantic</li> <li>\ud83d\udcbe Built-in caching support</li> <li>\ud83d\udd04 Automatic retries with exponential backoff</li> <li>\ud83d\udea6 Rate limiting</li> <li>\ud83d\udcdd Comprehensive documentation</li> <li>\ud83e\uddea Extensive test coverage</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<pre><code>from anyrun import AnyRunClient\n\n# Initialize client\nasync with AnyRunClient(api_key=\"your-api-key\") as client:\n    # Submit file for analysis\n    response = await client.sandbox.analyze(\n        obj_type=\"file\",\n        file=b\"file_content\",\n        env_os=\"windows\",\n        env_version=\"10\"\n    )\n\n    task_id = response[\"data\"][\"task_id\"]\n\n    # Monitor analysis status\n    async for update in client.sandbox.get_analysis_status(task_id):\n        print(f\"Status: {update['status']}\")\n\n    # Get analysis results\n    result = await client.sandbox.get_analysis(task_id)\n    print(f\"Analysis score: {result['data']['score']}\")\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install anyrun-tools\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+</li> <li><code>httpx</code> - For making HTTP requests</li> <li><code>pydantic</code> - For data validation</li> <li><code>aioredis</code> (optional) - For Redis caching support</li> </ul>"},{"location":"#documentation","title":"Documentation","text":"<p>For detailed documentation, please visit:</p> <ul> <li>Installation</li> <li>Configuration</li> <li>Quick Start</li> <li>API Reference</li> <li>Examples</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"#security","title":"Security","text":"<p>If you discover a security vulnerability within ANY.RUN Tools, please send an e-mail to Kirill Bykov via bykovk@anyrun.tools. All security vulnerabilities will be promptly addressed.</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":""},{"location":"getting-started/configuration/#basic-configuration","title":"Basic configuration","text":"<p>The minimal configuration requires only an API key:</p> <pre><code>from anyrun import AnyRunClient\n\nclient = AnyRunClient(api_key=\"your-api-key\")\n</code></pre>"},{"location":"getting-started/configuration/#advanced-configuration","title":"Advanced configuration","text":"<p>You can customize various aspects of the client:</p> <pre><code>from anyrun import AnyRunClient\n\nclient = AnyRunClient(\n    api_key=\"your-api-key\",\n    sandbox_version=\"v1\",\n    timeout=30.0,\n    verify_ssl=True,\n    user_agent=\"MyApp/1.0\",\n    headers={\"X-Custom\": \"value\"},\n    cache_enabled=True,\n    cache_ttl=300,\n    cache_backend=\"memory\",\n    rate_limit_enabled=True,\n    retry_strategy=\"exponential\",\n)\n</code></pre>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment variables","text":"<p>You can also configure the client using environment variables:</p> <pre><code># API settings\nexport ANYRUN_API_KEY=\"your-api-key\"\nexport ANYRUN_API_VERSION=\"v1\"\nexport ANYRUN_BASE_URL=\"https://api.any.run\"\n\n# HTTP settings\nexport ANYRUN_TIMEOUT=30\nexport ANYRUN_VERIFY_SSL=true\nexport ANYRUN_USER_AGENT=\"your-app/1.0\"\n\n# Cache settings\nexport ANYRUN_CACHE_ENABLED=true\nexport ANYRUN_CACHE_TTL=300\nexport ANYRUN_CACHE_BACKEND=\"redis\"\nexport ANYRUN_REDIS_URL=\"redis://localhost:6379\"\nexport ANYRUN_REDIS_PASSWORD=\"secret\"\n\n# Retry settings\nexport ANYRUN_RETRY_ENABLED=true\nexport ANYRUN_RETRY_COUNT=3\nexport ANYRUN_RETRY_DELAY=1.0\n\n# Rate limiting\nexport ANYRUN_RATE_LIMIT_ENABLED=true\nexport ANYRUN_RATE_LIMIT_STRATEGY=\"wait\"\n\n# Logging\nexport ANYRUN_LOG_LEVEL=\"INFO\"\nexport ANYRUN_LOG_FORMAT=\"[{time}] {level} - {message}\"\n</code></pre>"},{"location":"getting-started/configuration/#configuration-file","title":"Configuration file","text":"<p>You can also create a configuration file <code>anyrun.toml</code>:</p> <pre><code>[api]\nkey = \"your-api-key\"\nversion = \"v1\"\nbase_url = \"https://api.any.run\"\n\n[http]\ntimeout = 30\nverify_ssl = true\nuser_agent = \"your-app/1.0\"\n\n[cache]\nenabled = true\nttl = 300\nbackend = \"redis\"\n\n[cache.redis]\nurl = \"redis://localhost:6379\"\npassword = \"secret\"\n\n[retry]\nenabled = true\ncount = 3\ndelay = 1.0\nstatus_codes = [408, 429, 500, 502, 503, 504]\n\n[rate_limit]\nenabled = true\nstrategy = \"wait\"\n\n[logging]\nlevel = \"INFO\"\nformat = \"[{time}] {level} - {message}\"\n</code></pre>"},{"location":"getting-started/configuration/#configuration-priority","title":"Configuration priority","text":"<p>Configuration values are loaded in the following order (later values override earlier ones):</p> <ol> <li>Default values</li> <li>Configuration file</li> <li>Environment variables</li> <li>Constructor arguments</li> </ol>"},{"location":"getting-started/configuration/#next-steps","title":"Next steps","text":"<ul> <li>Quick start guide</li> <li>API reference</li> <li>Examples</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<p>Before installing ANY.RUN Tools, make sure you have:</p> <ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> <li>API key from ANY.RUN</li> </ul>"},{"location":"getting-started/installation/#installing-with-pip","title":"Installing with pip","text":"<p>The simplest way to install ANY.RUN Tools is using pip:</p> <pre><code>pip install anyrun-tools\n</code></pre> <p>This will install the package and all required dependencies.</p>"},{"location":"getting-started/installation/#installing-from-source","title":"Installing from source","text":"<p>If you want to install the latest development version or contribute to the project, you can install from source:</p> <pre><code>git clone https://github.com/anyrun/anyrun-tools.git\ncd anyrun-tools\npip install -e .\n</code></pre>"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional dependencies","text":"<p>ANY.RUN Tools has several optional dependencies that provide additional features:</p> <ul> <li> <p><code>redis</code> - For Redis caching support:   <pre><code>pip install anyrun-tools[redis]\n</code></pre></p> </li> <li> <p><code>dev</code> - For development (includes testing and documentation tools):   <pre><code>pip install anyrun-tools[dev]\n</code></pre></p> </li> <li> <p><code>docs</code> - For building documentation:   <pre><code>pip install anyrun-tools[docs]\n</code></pre></p> </li> </ul>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying installation","text":"<p>You can verify that ANY.RUN Tools is installed correctly by running Python and importing the package:</p> <pre><code>import anyrun\nprint(anyrun.__version__)\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next steps","text":"<ul> <li>Configure the client</li> <li>Quick start guide</li> <li>API reference</li> </ul>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common issues","text":"<ol> <li>ImportError: No module named 'anyrun'</li> <li>Make sure you have installed the package correctly</li> <li> <p>Check that you're using the correct Python environment</p> </li> <li> <p>Version conflicts</p> </li> <li>Try installing in a fresh virtual environment</li> <li> <p>Update your dependencies to their latest versions</p> </li> <li> <p>Installation fails</p> </li> <li>Make sure you have the latest pip version: <code>pip install --upgrade pip</code></li> <li>Check your Python version: <code>python --version</code></li> </ol>"},{"location":"getting-started/installation/#getting-help","title":"Getting help","text":"<p>If you encounter any issues during installation:</p> <ol> <li>Check our GitHub Issues for similar problems</li> <li>Create a new issue if your problem hasn't been reported</li> <li>Include your:</li> <li>Python version</li> <li>Installation method</li> <li>Full error message</li> <li>Operating system</li> </ol>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>This guide will help you get started with ANY.RUN Tools quickly.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ol> <li> <p>Installed ANY.RUN Tools:    <pre><code>pip install anyrun-tools\n</code></pre></p> </li> <li> <p>Obtained an API key from ANY.RUN</p> </li> </ol>"},{"location":"getting-started/quickstart/#basic-usage","title":"Basic usage","text":""},{"location":"getting-started/quickstart/#initialize-client","title":"Initialize client","text":"<pre><code>from anyrun import AnyRunClient\n\n# Using context manager (recommended)\nasync with AnyRunClient(api_key=\"your-api-key\") as client:\n    # Use client here\n    ...\n\n# Or manually\nclient = AnyRunClient(api_key=\"your-api-key\")\ntry:\n    # Use client here\n    ...\nfinally:\n    await client.close()\n</code></pre>"},{"location":"getting-started/quickstart/#sandbox-api-examples","title":"Sandbox API examples","text":""},{"location":"getting-started/quickstart/#analyze-file","title":"Analyze file","text":"<pre><code># Submit file for analysis\nresponse = await client.sandbox.analyze(\n    obj_type=\"file\",\n    file=b\"file_content\",\n    env_os=\"windows\",\n    env_version=\"10\"\n)\n\ntask_id = response[\"data\"][\"task_id\"]\n\n# Monitor analysis status\nasync for update in client.sandbox.get_analysis_status(task_id):\n    print(f\"Status: {update['status']}\")\n\n# Get analysis results\nresult = await client.sandbox.get_analysis(task_id)\nprint(f\"Analysis score: {result['data']['score']}\")\n</code></pre>"},{"location":"getting-started/quickstart/#analyze-url","title":"Analyze URL","text":"<pre><code># Submit URL for analysis\nresponse = await client.sandbox.analyze(\n    obj_type=\"url\",\n    obj_url=\"https://example.com\",\n    env_os=\"windows\",\n    env_version=\"10\"\n)\n\ntask_id = response[\"data\"][\"task_id\"]\n</code></pre>"},{"location":"getting-started/quickstart/#monitor-task-in-real-time","title":"Monitor task in real-time","text":"<pre><code># Monitor task with detailed updates\nasync for update in client.sandbox.get_analysis_monitor(task_id):\n    if \"process\" in update[\"data\"]:\n        proc = update[\"data\"][\"process\"]\n        print(f\"New process: {proc['name']} (PID: {proc['pid']})\")\n\n    if \"network\" in update[\"data\"]:\n        net = update[\"data\"][\"network\"]\n        print(f\"Network: {net['protocol']} {net['dst_ip']}:{net['dst_port']}\")\n</code></pre>"},{"location":"getting-started/quickstart/#ti-lookup-api-examples","title":"TI Lookup API examples","text":""},{"location":"getting-started/quickstart/#look-up-hash","title":"Look up hash","text":"<pre><code># Look up file hash\nresult = await client.ti_lookup.lookup_hash(\n    hash_value=\"0123456789abcdef0123456789abcdef\",\n    hash_type=\"md5\"\n)\n\nif result[\"matches\"]:\n    for match in result[\"matches\"]:\n        print(f\"Match found: {match['classification']}\")\n</code></pre>"},{"location":"getting-started/quickstart/#ti-yara-api-examples","title":"TI YARA API examples","text":""},{"location":"getting-started/quickstart/#match-rule","title":"Match rule","text":"<pre><code># Match YARA rule\nrule_content = \"\"\"\nrule suspicious_behavior {\n    strings:\n        $s1 = \"malicious\" nocase\n    condition:\n        any of them\n}\n\"\"\"\n\nresult = await client.ti_yara.match_rule(\n    rule_content=rule_content,\n    target_type=\"public\"\n)\n\nif result[\"matches\"]:\n    for match in result[\"matches\"]:\n        print(f\"Match found: {match['hash']}\")\n</code></pre>"},{"location":"getting-started/quickstart/#error-handling","title":"Error handling","text":"<pre><code>from anyrun.exceptions import (\n    APIError,\n    AuthenticationError,\n    RateLimitError,\n    ServerError,\n)\n\ntry:\n    result = await client.sandbox.analyze(...)\nexcept AuthenticationError:\n    print(\"Invalid API key\")\nexcept RateLimitError as e:\n    print(f\"Rate limit exceeded. Try again in {e.retry_after} seconds\")\nexcept ServerError:\n    print(\"Server error occurred\")\nexcept APIError as e:\n    print(f\"API error: {str(e)}\")\n</code></pre>"},{"location":"getting-started/quickstart/#using-caching","title":"Using caching","text":"<pre><code># Enable Redis caching\nclient = AnyRunClient(\n    api_key=\"your-api-key\",\n    cache_enabled=True,\n    cache_backend=\"redis\",\n    cache_config={\n        \"url\": \"redis://localhost:6379\"\n    }\n)\n\n# Cached requests\nresult1 = await client.sandbox.get_analysis(task_id)  # Makes API request\nresult2 = await client.sandbox.get_analysis(task_id)  # Uses cache\n</code></pre>"},{"location":"getting-started/quickstart/#rate-limiting","title":"Rate limiting","text":"<pre><code># Configure rate limiting\nclient = AnyRunClient(\n    api_key=\"your-api-key\",\n    rate_limit_enabled=True,\n    rate_limit_strategy=\"wait\"  # Will wait when limit is reached\n)\n\n# Requests will be rate limited automatically\nfor file in files:\n    await client.sandbox.analyze(\n        obj_type=\"file\",\n        file=file,\n        env_os=\"windows\",\n        env_version=\"10\"\n    )\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next steps","text":"<ul> <li>Configuration guide - Learn about all configuration options</li> <li>API reference - Detailed API documentation</li> <li>Examples - More code examples</li> </ul>"}]}